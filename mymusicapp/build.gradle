plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}


android {
    namespace 'br.com.felnanuke.mymusicapp'
    compileSdk 34

    defaultConfig {
        applicationId "br.com.felnanuke.mymusicapp"
        minSdk 23
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "$compose_version"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                useJUnitPlatform()
            }
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }

}

// JaCoCo configuration for test coverage
jacoco {
    toolVersion = "0.8.8"
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/*$WhenMappings.*',
        '**/*$*$*.*', // Anonymous classes
        '**/*Module.*', // Hilt modules
        '**/*_HiltModules*.*',
        '**/*_Factory*.*',
        '**/*_MembersInjector*.*',
        '**/Hilt_*.*',
        '**/*Component*.*',
        '**/*_Impl*.*',
        '**/*Application*.*',
        '**/di/**/*.*'
    ]
    
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    
    classDirectories.setFrom(files([debugTree, kotlinDebugTree]))
    
    sourceDirectories.setFrom(files([
        "${project.projectDir}/src/main/java",
        "${project.projectDir}/src/main/kotlin"
    ]))
    
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
    ]))
}

// Generate coverage reports after tests
afterEvaluate {
    tasks.whenTaskAdded { task ->
        if (task.name == 'testDebugUnitTest') {
            task.finalizedBy 'jacocoTestReport'
        }
    }
}

// Clean generated files before each build to prevent virtual class issues
tasks.register('cleanGenerated', Delete) {
    description = 'Clean generated files and caches that might cause virtual class issues'
    group = 'build'
    
    delete 'build/generated'
    delete 'build/intermediates'
    delete 'build/kotlin'
    delete 'build/kspCaches'
    delete 'build/tmp'
    delete '.cxx'
    delete 'src/main/cpp/.cxx'
    
    // Clean Hilt generated files specifically
    delete 'build/generated/ksp'
    delete 'build/generated/ap_generated_sources'
    delete 'build/intermediates/annotation_processor_list'
    delete 'build/intermediates/javac'
}

// Clean Kotlin compilation cache
tasks.register('cleanKotlin', Delete) {
    description = 'Clean Kotlin compilation cache'
    group = 'build'
    
    delete 'build/kotlin'
    delete 'build/kspCaches'
    delete '.gradle/kotlin'
}

// Auto-clean before critical build tasks
tasks.configureEach { task ->
    if (task.name.startsWith('compile') || 
        task.name.startsWith('ksp') || 
        task.name == 'assembleDebug' ||
        task.name == 'assembleRelease') {
        task.dependsOn cleanGenerated
    }
}

// Ensure clean runs before KSP tasks to prevent Hilt/Dagger issues
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    dependsOn cleanKotlin
}

dependencies {
    // Compose BOM - ensures all Compose dependencies use compatible versions
    implementation platform('androidx.compose:compose-bom:2023.10.01')
    
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation "androidx.activity:activity-compose:1.8.2"
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation 'androidx.compose.material3:material3:1.1.2'
    implementation "androidx.compose.material:material"
    implementation 'androidx.documentfile:documentfile:1.0.1'
    testImplementation 'junit:junit:4.13.2'
    // JUnit Jupiter dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    // Added testing libraries
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.robolectric:robolectric:4.11.1'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test:runner:1.5.2'
    testImplementation 'androidx.test.ext:junit-ktx:1.1.5'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-tooling"
    debugImplementation "androidx.compose.ui:ui-test-manifest"
    implementation 'com.google.dagger:hilt-android:2.50'
    ksp 'com.google.dagger:hilt-compiler:2.50'
    implementation 'io.coil-kt:coil-compose:2.5.0'
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'
    implementation project(':audiowaveform')
    implementation project(':amplituda')
    implementation("org.burnoutcrew.composereorderable:reorderable:0.9.6")
    implementation 'com.google.accompanist:accompanist-pager:0.32.0'
    implementation("androidx.media:media:1.7.0")
    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'io.mockk:mockk:1.13.5'
    testImplementation 'androidx.arch.core:core-testing:2.2.0' // For InstantTaskExecutorRule

    // For testing LiveData
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
}